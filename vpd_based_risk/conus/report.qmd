---
title: "VPD-based Fire Risk Model"
format: gfm
execute: 
  echo: false
---

Carlos Dobler  
Research Scientist  
Woodwell Climate Research Center  
September, 2024  


This report shows results of a model trained to predict fire occurrence as a function of monthly vapor pressure deficit (VPD; from ERA5) and aboveground biomass (from ORNL). The model consists of a logistic regression with both predictors set up as interacting terms. It was trained on six partially overlapping spatial windows that together cover the whole CONUS. The rationale for training the model on a per-window basis was so that it could capture different fire regimes across the country. Once trained, predictions from different windows are stitched together applying a weighted average on overlapping areas, with weights being based on the distance to the center of windows.

Fire occurrence was obtained from MODIS's MOD14A2 product. Only data with the highest quality assessment rating was used. Quasi-absence data was generated by randomly sampling unburned grid cells at random dates.

The model was trained with fire occurrence and VPD data from 2000 to 2020. Biomass was incorporated into the model as a static variable, which means results assume it does not change over time.


```{r}
#| label: setup
#| include: false

library(tidyverse)
library(stars)

dir_data <- "/mnt/pers_disk/fire_northam"

tb_fit_results <- read_rds(str_glue("{dir_data}/tb_fit_results.rds"))

tb_lc_accuracy <- 
  read_csv(str_glue("{dir_data}/tb_lc_accuracy.csv")) %>% 
  mutate(land_cover = factor(land_cover, levels = c("tree_cover",
                                                    "shrubland",
                                                    "grassland",
                                                    "cropland",
                                                    "built_up",
                                                    "barren",
                                                    "wetland")))

```

To test its accuracy, I conducted a five-fold spatial cross-validation for each window. Folds here represent non-overlapping areas within the window, which ensures spatial autocorrelation is controlled for in the validation process.

The figure below shows the accuracy of model predictions for each fold for each of the six windows: 

```{r}
#| fig-width: 6
#| fig-height: 3
#| out-width: 60%

tb_accuracy <- 
  tb_fit_results %>% 
  unnest(.metrics) %>% 
  filter(.metric == "accuracy") %>%
  mutate(.estimate = .estimate*100) %>% 
  mutate(window = case_when(window == "1" ~ "south_west",
                            window == "2" ~ "south_center",
                            window == "3" ~ "south_east",
                            window == "4" ~ "north_west",
                            window == "5" ~ "north_center",
                            window == "6" ~ "north_east") %>% 
           factor(levels = c("north_west",
                             "north_center",
                             "north_east",
                             "south_west",
                             "south_center",
                             "south_east")))
  
set.seed(111)
tb_accuracy %>%    
  ggplot(aes(window, .estimate, fill = window)) +
  geom_jitter(width = 0.2, show.legend = F, pch = 21, size = 2.5) +
  labs(y = "accuracy (%)") +
  colorspace::scale_fill_discrete_qualitative()


```

Overall accuracy (across folds and windows): `r round(mean(tb_accuracy$.estimate), 1)`%.

.

The following figure shows receiver operating characteristic (ROC) curves for each fold and each window:

```{r}
#| fig-width: 9
#| fig-height: 6
#| out-width: 90%

tb_roc <- 
  tb_fit_results %>% 
  unnest(.metrics) %>% 
  filter(.metric == "roc_auc")

rocs <- 
  tb_fit_results %>% 
  unnest(.predictions) %>% 
  select(id, .pred_fire, ign, window) %>% 
  mutate(.pred_fire = round(.pred_fire, 1)) %>%
  mutate(window = case_when(window == "1" ~ "south_west",
                            window == "2" ~ "south_center",
                            window == "3" ~ "south_east",
                            window == "4" ~ "north_west",
                            window == "5" ~ "north_center",
                            window == "6" ~ "north_east") %>%
           factor(levels = c("north_west",
                             "north_center",
                             "north_east",
                             "south_west",
                             "south_center",
                             "south_east"))) %>%
  group_by(window) %>% 
  nest() %>% 
  
  mutate(p = map2(data, window, function(df, wndw) {
  
    df %>% 
      group_by(id) %>%
      yardstick::roc_curve(truth = ign, .pred_fire) %>%
      mutate(.threshold = if_else(.threshold == -Inf, 0, .threshold),
             .threshold = if_else(.threshold == Inf, 1, .threshold)) %>%
      
      ggplot(aes(x = specificity, y = sensitivity, group = id)) +
      geom_abline(intercept = 1, slope = 1, lty = 3) +
      geom_path(color = "grey40") +
      geom_point(aes(color = .threshold), size = 2) +
      coord_equal() +
      scale_x_reverse() +
      colorspace::scale_color_binned_qualitative("Dark3",
                                                 limits = c(0,1),
                                                 name = "prob.\nthreshold\n",
                                                 n.breaks = 9,
                                                 guide = guide_legend()) +
      labs(title = wndw)
    
  })) %>% 
  pull(p)
  
patchwork::wrap_plots(rocs[c(4:6,1:3)],
                      nrow = 2,
                      guides = "collect")


```

Overall AUC (area under the curve): `r round(mean(tb_roc$.estimate), 2)`.

.

The figure below shows the accuracy of the model per land cover class for each window:

```{r}
#| fig-width: 7
#| fig-height: 4.5
#| out-width: 70%

tb_lc_accuracy <- 
  tb_lc_accuracy %>% 
  mutate(window = case_when(window == "1" ~ "south_west",
                            window == "2" ~ "south_center",
                            window == "3" ~ "south_east",
                            window == "4" ~ "north_west",
                            window == "5" ~ "north_center",
                            window == "6" ~ "north_east") %>% 
           factor(levels = c("north_west",
                             "north_center",
                             "north_east",
                             "south_west",
                             "south_center",
                             "south_east")))


tb_lc_accuracy %>% 
  ggplot(aes(x = .estimate * 100, y = reorder(land_cover, desc(land_cover)), 
             fill = land_cover
             )) +
  geom_col(show.legend = F) +
  labs(x = "accuracy (%)") +
  theme(axis.title.y = element_blank()) +
  colorspace::scale_fill_discrete_qualitative("Dark3") +
  facet_wrap(~window, nrow = 2) +
  scale_x_continuous(breaks = seq(0,100,20))
  

```

.

As an example of results, the map below shows the probability of fire occurrence (p(fire)) for a random month in the summer season (JJA):

```{r}
#| fig-width: 6
#| fig-height: 3
#| out-width: 60%

s <- 
  str_glue("{dir_data}/results") %>% 
  fs::dir_ls() %>% 
  map(read_ncdf) %>% 
  suppressMessages() %>% 
  do.call(c, .)

dates <- 
  st_get_dimension_values(s, "time") %>% 
  unname() %>% 
  as_date()

d <- 
  dates[month(dates) %in% c(6,7,8)] %>% 
  sample(1)

s %>% 
  filter(time == d) %>% 
  adrop() %>% 
  as_tibble() %>% 
  ggplot(aes(lon, lat, fill = prob_fire)) +
  geom_raster() +
  colorspace::scale_fill_continuous_sequential("plasma", 
                                               rev = F,
                                               na.value = "transparent",
                                               limits = c(0,1),
                                               name = "p(fire)\n",
                                               guide = guide_colorbar(barwidth = 0.6)) +
  coord_equal() +
  theme(axis.title = element_blank()) +
  labs(title = str_sub(d, end = 7))

 
```

Below are the number of fire events registered by the MOD14A2 product for the same month:
```{r}
#| fig-width: 6
#| fig-height: 3
#| out-width: 60%

f <- 
  str_glue("{dir_data}/ignitions") %>% 
  fs::dir_ls() %>%
  str_subset(str_glue("{str_pad(month(d), 2, 'left', '0')}_{year(d)}.")) %>% 
  read_stars() %>% 
  setNames("fire") %>% 
  st_warp(s %>% slice(time, 1))
  
f[is.na(s %>% slice(time, 1))] <- NA  
  
f <- 
  f %>% 
  as_tibble()


f %>% 
  ggplot(aes(lon,lat,fill = fire)) +
  geom_raster() +
  colorspace::scale_fill_continuous_sequential("viridis", 
                                               rev = F,
                                               na.value = "transparent",
                                               trans = "sqrt",
                                               name = "fire\nevents\n",
                                               guide = guide_colorbar(barwidth = 0.6)) +
  coord_equal() +
  theme(axis.title = element_blank()) +
  labs(title = str_sub(d, end = 7))
  

```


Same as above, but for the winter season (DJF):

```{r}
#| fig-width: 6
#| fig-height: 3
#| out-width: 60%

d <- 
  dates[month(dates) %in% c(12,1,2)] %>% 
  sample(1)

s %>% 
  filter(time == d) %>% 
  adrop() %>% 
  as_tibble() %>% 
  ggplot(aes(lon, lat, fill = prob_fire)) +
  geom_raster() +
  colorspace::scale_fill_continuous_sequential("plasma", 
                                               rev = F,
                                               na.value = "transparent",
                                               limits = c(0,1),
                                               name = "p(fire)\n",
                                               guide = guide_colorbar(barwidth = 0.6)) +
  coord_equal() +
  theme(axis.title = element_blank()) +
  labs(title = str_sub(d, end = 7))

```

...and MOD14A2 for the same month:

```{r}
#| fig-width: 6
#| fig-height: 3
#| out-width: 60%

f <- 
  str_glue("{dir_data}/ignitions") %>% 
  fs::dir_ls() %>%
  str_subset(str_glue("{str_pad(month(d), 2, 'left', '0')}_{year(d)}.")) %>% 
  read_stars() %>% 
  setNames("fire") %>% 
  st_warp(s %>% slice(time, 1))
  
f[is.na(s %>% slice(time, 1))] <- NA  
  
f <- 
  f %>% 
  as_tibble()


f %>% 
  ggplot(aes(lon,lat,fill = fire)) +
  geom_raster() +
  colorspace::scale_fill_continuous_sequential("viridis", 
                                               rev = F,
                                               na.value = "transparent",
                                               trans = "sqrt",
                                               name = "fire\nevents\n",
                                               guide = guide_colorbar(barwidth = 0.6)) +
  coord_equal() +
  theme(axis.title = element_blank()) +
  labs(title = str_sub(d, end = 7))

```


The map below shows the probability of p(fire) > 0.9 on the 20 years used for training:

```{r}
#| fig-width: 6
#| fig-height: 3
#| out-width: 60%

s %>% 
  st_apply(c(1,2), \(x) mean(x > 0.9)) %>% 
  as_tibble() %>% 
  ggplot(aes(lon, lat, fill = prob_fire)) +
  geom_raster() +
  colorspace::scale_fill_continuous_sequential("plasma", 
                                               rev = F,
                                               na.value = "transparent",
                                               trans = "sqrt",
                                               # limits = c(0,1),
                                               name = "prob.\np(fire) > 0.9\n",
                                               guide = guide_colorbar(barwidth = 0.6)) +
  coord_equal() +
  theme(axis.title = element_blank())

```


